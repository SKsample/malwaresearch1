#!/usr/bin/python
# -*- encoding: utf-8 -*-

import sys
import re
import os
import requests
import google
import bs4

# API
# Hybrid-analysis.net

hybrid_analysis_api = ''
hybrid_analysis_secret_key = ''

#
# Global variables

HASH = []

#


def classify(string):
    if re.match('^[a-f0-9]{32}$', string):
        HASH.append(('md5', data.rstrip('\r\n')))
    if re.match('^[a-f0-9]{40}$', string):
        HASH.append(('sha1', data.rstrip('\r\n')))
    if re.match('^[a-f0-9]{64}$', string):
        HASH.append(('sha256', data.rstrip('\r\n')))


def search_hybrid_analysis(string, api, secret_key):
    headers = {'User-Agent': 'VxStream'}
    payload = {'apikey': api, 'secret': secret_key}
    r = requests.get('https://www.hybrid-analysis.com/api/scan/' + string, headers=headers, params=payload)
    if r.json()['response'] == 0 and len(r.json()['response']) > 0:
        return {'status': 'Found',
                'download_link': 'https://www.hybrid-analysis.com/sample' + r.json()['response'][0]['sha256'],
                'data': r.json()}
    if r.json()['response'] == 0 and len(r.json()['response']) == 0:
        return {'status': 'Found?', 'data': r.json()}
    else:
        return {'status': 'Not found'}


def search_malware_traffic_analysis(string):
    for url in google.search('inurl:www.malware-traffic-analysis.net ' + string,
                             tld='com', lang='en', pause=2.0):
        return [bs4.BeautifulSoup(requests.get(url).text).title.text, url]


def search(lists):
    for each in lists:
        result = search_hybrid_analysis(each[1], hybrid_analysis_api, hybrid_analysis_secret_key)
        print('Search for ' + each[1] + ' on hybrid-analysis.com')
        print('Status: ' + result['status'])
        print('Download link: ' + result['download_link'])
        result = search_malware_traffic_analysis(each[1])
        print('Search for' + each[1] + ' on malware-traffic-analysis.net')
        print('Related article: ' + result[0])
        print('Article\'s link: ' + result[1])

if __name__ == '__main__':
    if sys.argv[1]:
        if os.path.isfile(sys.argv[1]):
            with open(sys.argv[1], 'r') as stream:
                for data in stream:
                    classify(data.rstrip('\r\n'))
            if HASH:
                search(HASH)
        else:
            classify(sys.argv[1])
            if HASH:
                search(HASH)
    else:
        print('Usage: python malwaresearch.py SHA256.txt OR python malwaresearch.py <SHA256>')
