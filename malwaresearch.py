#!/usr/bin/env python
#-*- coding:utf-8 -*-

import re
import os
import requests
import google
import bs4
import json
from optparse import OptionParser

__name__ = "malwaresearch"
__version__ = "1"

MD5 = 1
SHA1 = 2
SHA256 = 3

def classify(hash):
    if re.match('^[a-f0-9]{32}$', hash):
        return MD5
    if re.match('^[a-f0-9]{40}$', hash):
        return SHA1
    if re.match('^[a-f0-9]{64}$', hash):
        return SHA256

    return False


class Result:
    def __init__(self, hash, found, description, link):
        self.hash = hash
        self.found = found
        self.description = description
        self.link = link

    def __repr__(self):
        found = "Not Found"
        if self.found: found = "Found"
        return "[%s] %s"%(found, self.hash)

class HybridAnalysis:
    def __init__(self, apikey, secret_key):
        self.name = "hybrid-analysis.com"
        self.apikey = apikey
        self.secret_key = secret_key
        self.url = 'https://www.hybrid-analysis.com/'

    def search(self, hash):
        headers = {'User-Agent': 'VxStream'}
        payload = {'apikey': self.apikey, 'secret': self.secret_key}
        r = requests.get(self.url + 'api/scan/' + hash, headers=headers, params=payload)
        data = r.json()
        if data['response_code'] == 0:
            res = data['response'][0]
            return Result(hash, True, res['virustotal_familyname'] or '-',
                            self.url + 'sample/%s'%(res['sha256']))

        return Result(hash, False, data, "")

class Google:
    def __init__(self, url, tld='com', lang='en', pause=2.0):
        self.url = url
        self.tld = tld
        self.lang = lang
        self.pause = pause

    def search(self, hash):
        res = google.search('inurl:%s %s'%(self.url, hash), tld=self.tld,
                                lang=self.lang, pause=self.pause)

        try:
            url = res.next()
            content = requests.get(url).content
            title = bs4.BeautifulSoup(content, "lxml").title.text
            return Result(hash, True, title, url)
        except:
            pass

        return Result(hash, False, "", "")

class MalwareTrafficAnalysis(Google):
    def __init__(self):
        self.name = "malware-traffic-analysis.net"
        url = "www.malware-traffic-analysis.net"
        Google.__init__(self, url)

class MalwareBreakdown(Google):
    def __init__(self):
        self.name = "malwarebreakdown.com"
        url = "malwarebreakdown.com"
        Google.__init__(self, url)

def main():
    parser = OptionParser(usage="%prog [options] [hashes|files]")
    parser.add_option("-f", "--file", action="store_true", help="data file path", dest="file")
    parser.add_option("-c", "--config", dest="config", help="config file path")
    parser.add_option("-m", "--mode", dest="mode",
help="""search mode: hybrid-analysis (1), malware-traffic-analysis (2), malware breakdown (3).
Default is all.""", default="1,2,3")

    (options, args) = parser.parse_args()

    if not args:
        parser.print_help()
        exit()

    hashes = []
    if options.file:
        for arg in args:
            with open(arg, "r") as stream:
                for line in stream:
                    line = line.rstrip('\r\n')
                    if classify(line):
                        hashes.append(line)
    else:
        for inp in inps:
            inp = inp.strip()
            if classify(inp):
                hashs.append(inp)

    if not hashs:
        print "Invalid hash"
        exit()

    modes = options.mode.split(",")
    m = True
    for mode in modes:
        if mode not in ['1', '2', '3']:
            m = False
            break

    if not modes or not m:
        print "Invalid mode"
        exit()

    home = os.environ["HOME"]
    config = {}
    if os.path.isfile(options.config or ""):
        try:
            config = json.load(open(options.config, "r"))
        except:
            pass
    elif os.path.isfile(home + "/.config.json"):
        try:
            config = json.load(open(home + "/.config.json", "r"))
        except:
            print "Error config from %s"%(home + "/.config.json")
            pass
    else:
        print "Input some config please answer some question"
        a = raw_input("Hybrid Analysis api key: ").strip()
        b = raw_input("Hybrid Analysis secret key: ").strip()

        try:
            config["hybrid_analysis"] = {}
            config["hybrid_analysis"]["api_key"] = a
            config["hybrid_analysis"]["secret_key"] = b
            json.dump(config, open(home + "/.config.json", "w"))
            print "Write config to %s" %(home + "/.config.json")
        except Exception:
            config = {}
            pass

    if not config:
        print "Invalid config"
        exit()

    hybrid_analysis = HybridAnalysis(config["hybrid_analysis"]["api_key"],
                                        config["hybrid_analysis"]["secret_key"])
    malware_traffic_analysis = MalwareTrafficAnalysis()
    malware_breakdown = MalwareBreakdown()

    tools = {
        '1': hybrid_analysis,
        '2': malware_traffic_analysis,
        '3': malware_breakdown
    }

    for hash in hashs:
        print "Search for %s"%(hash)
        for mode in modes:
            tool = tools[mode]
            print '\tWith %s'%(tool.name)
            res = tool.search(hash)
            if res.found:
                print '\t\tDescription: %s'%(res.description)
                print '\t\tLink: %s'%(res.link)
            else:
                print "\t\tNot Found"

        print

if __name__ == '__main__':
    main()
