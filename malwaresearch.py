#!/usr/bin/python
# -*- encoding: utf-8 -*-

import sys
import re
import os
import requests

# API
# Hybrid-analysis.net

hybrid_analysis_api = ''
hybrid_analysis_secret_key = ''

#
# Global variables

HASH = []

#


def classify(string):
	if re.match('^[a-f0-9]{32}$', string): HASH.append(('md5', data.rstrip('\r\n')))
	if re.match('^[a-f0-9]{40}$', string): HASH.append(('sha1', data.rstrip('\r\n')))
	if re.match('^[a-f0-9]{64}$', string): HASH.append(('sha256', data.rstrip('\r\n')))


def search_hybrid_analysis(string, api, secret_key):
	headers = {'User-Agent': 'VxStream'}
	payload = {'apikey': api, 'secret': secret_key}
	r = requests.get('https://www.hybrid-analysis.com/api/scan/' + string, headers=headers, params=payload)
	return r.json() if r.json()['response_code'] == 0 else False


def search(lists):
	for each in lists:
		result = search_hybrid_analysis(each[1], hybrid_analysis_api, hybrid_analysis_secret_key)
		if result and len(result['response']) > 0:
			print(each[1] + ' found on Hybrid-analysis.net')

			try:
				print('File name: ' + result['response'][0]['submitname'])
			except KeyError:
				print('File name: None')

			print('Submitted date: ' + result['response'][0]['analysis_start_time'])
			print('Analysis result: https://www.hybrid-analysis.com/sample/' + result['response'][0]['sha256'])
			print
		if result and len(result['response']) <= 0:
			print(each[1] + ' found on Hybrid-analysis.net but no information provided')
			print

if __name__ == '__main__':
	if sys.argv[1]:
		if os.path.isfile(sys.argv[1]):
			with open(sys.argv[1], 'r') as stream:
				for data in stream:
					classify(data.rstrip('\r\n'))
			if HASH:
				search(HASH)
		else:
			classify(sys.argv[1])
			if HASH:
				search(HASH)
	else:
		print('Usage: python malwaresearch.py SHA256.txt OR python malware.py <SHA256>')